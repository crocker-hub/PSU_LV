import numpy as np
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split

def non_func(x):
    return 1.6345 - 0.6235*np.cos(0.6067*x) - 1.3501*np.sin(0.6067*x)

def add_noise(y):
    np.random.seed(14)
    varNoise = np.max(y) - np.min(y)
    return y + 0.1*varNoise*np.random.normal(0,1,len(y))[:, np.newaxis]

x = np.linspace(1, 10, 100)[:, np.newaxis]
y_true = non_func(x)
y_measured = add_noise(y_true)

degrees = [2, 6, 15]
MSEtrain, MSEtest = [], []

plt.figure(figsize=(10, 6))
for d in degrees:
    poly = PolynomialFeatures(degree=d)
    x_poly = poly.fit_transform(x)
    
    y_measured = add_noise(non_func(x))
    
    xtrain, xtest, ytrain, ytest = train_test_split(x_poly, y_measured, test_size=0.3, random_state=12)
    model = lm.LinearRegression()
    model.fit(xtrain, ytrain)
    
    MSEtrain.append(mean_squared_error(ytrain, model.predict(xtrain)))
    MSEtest.append(mean_squared_error(ytest, model.predict(xtest)))
    
    plt.plot(x, model.predict(x_poly), label=f'Degree {d}')

plt.scatter(x, y_measured, color='black', label='Original Data')
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.title('Polinomska regresija za razliƒçite stupnjeve')
plt.show()

print("MSE za trening podatke:", MSEtrain)
print("MSE za testne podatke:", MSEtest)
