import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.preprocessing import StandardScaler

import matplotlib.image as mpimg
import numpy as np

def generate_data(n_samples, flagc):
    from sklearn import datasets
    import numpy as np
    
    if flagc == 1:
        random_state = 365
        X, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state)
        
    elif flagc == 2:
        random_state = 148
        X, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state)
        transformation = [[0.60834549, -0.63667341], [-0.40887718, 0.85253229]]
        X = np.dot(X, transformation)
        
    elif flagc == 3:
        random_state = 148
        X, y = datasets.make_blobs(n_samples=n_samples,
                                    centers=4,
                                    cluster_std=[1.0, 2.5, 0.5, 3.0],
                                    random_state=random_state)

    elif flagc == 4:
        X, y = datasets.make_circles(n_samples=n_samples, factor=.5, noise=.05)
        
    elif flagc == 5:
        X, y = datasets.make_moons(n_samples=n_samples, noise=.05)
    
    else:
        X, y = [], []
        
    return X, y


n_samples = 500
flagc = 1  


X, _ = generate_data(n_samples, flagc)


kmeans = KMeans(n_clusters=3, random_state=0)
y_kmeans = kmeans.fit_predict(X)

plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, cmap='viridis', s=30)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], 
            c='red', marker='X', s=200, label='Centri klastera')
plt.title(f'KMeans klasteriranje (flagc={flagc})')
plt.xlabel('X1')
plt.ylabel('X2')
plt.legend()
plt.grid(True)
plt.show()



image = mpimg.imread('C:/Users/student/Downloads/example.png')
original_shape = image.shape
print(f"Originalna veliƒçina slike: {original_shape}")

pixels = image.reshape(-1, 3)

n_colors = 16
kmeans = KMeans(n_clusters=n_colors, random_state=0)
kmeans.fit(pixels)

new_colors = kmeans.cluster_centers_[kmeans.predict(pixels)]

quantized_image = new_colors.reshape(original_shape)

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(image)
plt.title('Originalna slika')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(quantized_image.astype(np.uint8))  
plt.title(f'Kvantizirana slika ({n_colors} boja)')
plt.axis('off')

plt.tight_layout()
plt.show()
