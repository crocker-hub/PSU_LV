import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.preprocessing import StandardScaler

def generate_data(n_samples, flagc):
    from sklearn import datasets
    import numpy as np
    
    if flagc == 1:
        random_state = 365
        X, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state)
        
    elif flagc == 2:
        random_state = 148
        X, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state)
        transformation = [[0.60834549, -0.63667341], [-0.40887718, 0.85253229]]
        X = np.dot(X, transformation)
        
    elif flagc == 3:
        random_state = 148
        X, y = datasets.make_blobs(n_samples=n_samples,
                                    centers=4,
                                    cluster_std=[1.0, 2.5, 0.5, 3.0],
                                    random_state=random_state)

    elif flagc == 4:
        X, y = datasets.make_circles(n_samples=n_samples, factor=.5, noise=.05)
        
    elif flagc == 5:
        X, y = datasets.make_moons(n_samples=n_samples, noise=.05)
    
    else:
        X, y = [], []
        
    return X, y


n_samples = 500
flagc = 1  


X, _ = generate_data(n_samples, flagc)


kmeans = KMeans(n_clusters=3, random_state=0)
y_kmeans = kmeans.fit_predict(X)

plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, cmap='viridis', s=30)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], 
            c='red', marker='X', s=200, label='Centri klastera')
plt.title(f'KMeans klasteriranje (flagc={flagc})')
plt.xlabel('X1')
plt.ylabel('X2')
plt.legend()
plt.grid(True)
plt.show()



X, _ = generate_data(100, flagc=1)  

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

methods = ['ward', 'single', 'complete', 'average']

for method in methods:
    linked = linkage(X_scaled, method=method)

    plt.figure(figsize=(10, 6))
    dendrogram(linked, truncate_mode='lastp', p=30, leaf_rotation=90, leaf_font_size=10, show_contracted=True)
    plt.title(f'Dendogram â€“ metoda: {method}')
    plt.xlabel('Uzorci')
    plt.ylabel('Udaljenost (distanca)')
    plt.grid(True)
    plt.show()
